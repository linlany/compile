line:  0	nodeid: 0	program	child:[ 1  2  3  ]
line:  2	nodeid: 1	type  type:VOID	
line:  2	nodeid: 2	variable  name: main	index: 0	scope: 0x5649b2030180	
line:  29	nodeid: 3	statement  stmtType: LIST	child:[ 4  25  98  ]
line:  9	nodeid: 4	statement  stmtType: LIST	child:[ 5  9  13  16  19  23  ]
line:  3	nodeid: 5	statement  stmtType: DECL	child:[ 6  7  8  ]
line:  3	nodeid: 6	type  type:int	
line:  3	nodeid: 7	variable  name: a	index: 0	scope: 0x5649b2036450	
line:  3	nodeid: 8	variable  name: s	index: 1	scope: 0x5649b2036450	
line:  4	nodeid: 9	statement  stmtType: DECL	child:[ 10  11  12  ]
line:  4	nodeid: 10	type  type:bool	
line:  4	nodeid: 11	variable  name: test	index: 2	scope: 0x5649b2036450	
line:  4	nodeid: 12	CONST  Type: bool	value: 0	
line:  5	nodeid: 13	expression  opType: OP_ASSIGN	child:[ 14  15  ]
line:  5	nodeid: 14	variable  name: a	index: 0	scope: 0x5649b2036450	
line:  5	nodeid: 15	CONST  Type: int	value: 10	
line:  6	nodeid: 16	expression  opType: OP_ASSIGN	child:[ 17  18  ]
line:  6	nodeid: 17	variable  name: s	index: 1	scope: 0x5649b2036450	
line:  6	nodeid: 18	CONST  Type: int	value: 0	
line:  7	nodeid: 19	statement  stmtType: DECL	child:[ 20  21  22  ]
line:  7	nodeid: 20	type  type:char	
line:  7	nodeid: 21	variable  name: ch	index: 3	scope: 0x5649b2036450	
line:  7	nodeid: 22	CONST  Type: char	value: 'a'	
line:  8	nodeid: 23	statement  stmtType: SCANF	child:[ 24  ]
line:  8	nodeid: 24	variable  name: ch	index: 3	scope: 0x5649b2036450	
line:  10	nodeid: 25	statement  stmtType: WHILE	child:[ 26  44  ]
line:  10	nodeid: 26	expression  opType: OP_OR	child:[ 27  34  ]
line:  10	nodeid: 27	expression  opType: OP_AND	child:[ 28  31  ]
line:  10	nodeid: 28	expression  opType: OP_GRE	child:[ 29  30  ]
line:  10	nodeid: 29	variable  name: a	index: -1	scope: 0	
line:  10	nodeid: 30	CONST  Type: int	value: 0	
line:  10	nodeid: 31	expression  opType: OP_LOE	child:[ 32  33  ]
line:  10	nodeid: 32	variable  name: a	index: -1	scope: 0	
line:  10	nodeid: 33	CONST  Type: int	value: 10	
line:  10	nodeid: 34	expression  opType: OP_AND	child:[ 35  40  ]
line:  10	nodeid: 35	expression  opType: OP_EQ	child:[ 36  39  ]
line:  10	nodeid: 36	expression  opType: OP_MOD	child:[ 37  38  ]
line:  10	nodeid: 37	variable  name: a	index: -1	scope: 0	
line:  10	nodeid: 38	CONST  Type: int	value: 100	
line:  10	nodeid: 39	CONST  Type: int	value: 10	
line:  10	nodeid: 40	expression  opType: OP_EQ	child:[ 41  43  ]
line:  10	nodeid: 41	expression  opType: OP_NOT	child:[ 42  ]
line:  10	nodeid: 42	variable  name: a	index: -1	scope: 0	
line:  10	nodeid: 43	CONST  Type: int	value: 10	
line:  27	nodeid: 44	statement  stmtType: LIST	child:[ 45  50  53  56  61  ]
line:  11	nodeid: 45	expression  opType: OP_ASSIGN	child:[ 46  47  ]
line:  11	nodeid: 46	variable  name: a	index: -1	scope: 0	
line:  11	nodeid: 47	expression  opType: OP_MINUS	child:[ 48  49  ]
line:  11	nodeid: 48	variable  name: a	index: -1	scope: 0	
line:  11	nodeid: 49	CONST  Type: int	value: 1	
line:  12	nodeid: 50	statement  stmtType: DECL	child:[ 51  52  ]
line:  12	nodeid: 51	type  type:int	
line:  12	nodeid: 52	variable  name: a	index: 0	scope: 0x5649b2038a60	
line:  13	nodeid: 53	expression  opType: OP_ASSIGN	child:[ 54  55  ]
line:  13	nodeid: 54	variable  name: a	index: 0	scope: 0x5649b2038a60	
line:  13	nodeid: 55	CONST  Type: int	value: 10	
line:  14	nodeid: 56	expression  opType: OP_ASSIGN	child:[ 57  58  ]
line:  14	nodeid: 57	variable  name: s	index: -1	scope: 0	
line:  14	nodeid: 58	expression  opType: OP_PLUSS	child:[ 59  60  ]
line:  14	nodeid: 59	variable  name: s	index: -1	scope: 0	
line:  14	nodeid: 60	variable  name: a	index: 0	scope: 0x5649b2038a60	
line:  15	nodeid: 61	statement  stmtType: IF	child:[ 62  67  96  ]
line:  15	nodeid: 62	expression  opType: OP_LESS	child:[ 63  65  ]
line:  15	nodeid: 63	expression  opType: OP_MINUS	child:[ 64  ]
line:  15	nodeid: 64	variable  name: s	index: -1	scope: 0	
line:  15	nodeid: 65	expression  opType: OP_MINUS	child:[ 66  ]
line:  15	nodeid: 66	CONST  Type: int	value: 10	
line:  24	nodeid: 67	statement  stmtType: LIST	child:[ 68  70  72  75  78  ]
line:  16	nodeid: 68	statement  stmtType: PRINTF	child:[ 69  ]
line:  16	nodeid: 69	CONST  Type: string	value: "result is: "	
line:  17	nodeid: 70	statement  stmtType: PRINTF	child:[ 71  ]
line:  17	nodeid: 71	variable  name: s	index: -1	scope: 0	
line:  18	nodeid: 72	statement  stmtType: DECL	child:[ 73  74  ]
line:  18	nodeid: 73	type  type:int	
line:  18	nodeid: 74	variable  name: b	index: 0	scope: 0x5649b203a170	
line:  19	nodeid: 75	expression  opType: OP_ASSIGN	child:[ 76  77  ]
line:  19	nodeid: 76	variable  name: b	index: 0	scope: 0x5649b203a170	
line:  19	nodeid: 77	CONST  Type: int	value: 10	
line:  20	nodeid: 78	statement  stmtType: FOR	child:[ 79  83  86  91  ]
line:  20	nodeid: 79	statement  stmtType: DECL	child:[ 80  81  82  ]
line:  20	nodeid: 80	type  type:int	
line:  20	nodeid: 81	variable  name: i	index: 1	scope: 0x5649b203a170	
line:  20	nodeid: 82	CONST  Type: int	value: 0	
line:  20	nodeid: 83	expression  opType: OP_LESS	child:[ 84  85  ]
line:  20	nodeid: 84	variable  name: i	index: 1	scope: 0x5649b203a170	
line:  20	nodeid: 85	variable  name: b	index: 0	scope: 0x5649b203a170	
line:  20	nodeid: 86	expression  opType: OP_ASSIGN	child:[ 87  88  ]
line:  20	nodeid: 87	variable  name: i	index: 1	scope: 0x5649b203a170	
line:  20	nodeid: 88	expression  opType: OP_PLUSS	child:[ 89  90  ]
line:  20	nodeid: 89	variable  name: i	index: 1	scope: 0x5649b203a170	
line:  20	nodeid: 90	CONST  Type: int	value: 1	
line:  23	nodeid: 91	statement  stmtType: LIST	child:[ 92  94  ]
line:  21	nodeid: 92	statement  stmtType: PRINTF	child:[ 93  ]
line:  21	nodeid: 93	CONST  Type: string	value: "have fun:"	
line:  22	nodeid: 94	statement  stmtType: PRINTF	child:[ 95  ]
line:  22	nodeid: 95	variable  name: i	index: 1	scope: 0x5649b203a170	
line:  25	nodeid: 96	statement  stmtType: ELSE	child:[ 97  ]
line:  26	nodeid: 97	statement  stmtType: SKIP	
line:  28	nodeid: 98	statement  stmtType: RETURN	
