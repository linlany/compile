line:  0	nodeid: 0	program	child:[ 1  2  3  7  10  13  16  18  ]
line:  1	nodeid: 1	type  type:VOID	
line:  1	nodeid: 2	variable  name: main	
line:  2	nodeid: 3	statement  stmtType: DECL	child:[ 4  5  6  ]
line:  2	nodeid: 4	type  type:int	
line:  2	nodeid: 5	variable  name: a	
line:  2	nodeid: 6	variable  name: s	
line:  3	nodeid: 7	expression  opType: OP_ASSIGN	child:[ 8  9  ]
line:  3	nodeid: 8	variable  name: a	
line:  3	nodeid: 9	CONST  Type: int	
line:  4	nodeid: 10	expression  opType: OP_ASSIGN	child:[ 11  12  ]
line:  4	nodeid: 11	variable  name: s	
line:  4	nodeid: 12	CONST  Type: int	
line:  5	nodeid: 13	statement  stmtType: DECL	child:[ 14  15  ]
line:  5	nodeid: 14	type  type:char	
line:  5	nodeid: 15	variable  name: ch	
line:  6	nodeid: 16	statement  stmtType: SCANF	child:[ 17  ]
line:  6	nodeid: 17	variable  name: ch	
line:  7	nodeid: 18	statement  stmtType: WHILE	child:[ 19  37  40  43  ]
line:  7	nodeid: 19	expression  opType: OP_OR	child:[ 20  27  ]
line:  7	nodeid: 20	expression  opType: OP_AND	child:[ 21  24  ]
line:  7	nodeid: 21	expression  opType: OP_GRE	child:[ 22  23  ]
line:  7	nodeid: 22	variable  name: a	
line:  7	nodeid: 23	CONST  Type: int	
line:  7	nodeid: 24	expression  opType: OP_LOE	child:[ 25  26  ]
line:  7	nodeid: 25	variable  name: a	
line:  7	nodeid: 26	CONST  Type: int	
line:  7	nodeid: 27	expression  opType: OP_AND	child:[ 28  33  ]
line:  7	nodeid: 28	expression  opType: OP_EQ	child:[ 29  32  ]
line:  7	nodeid: 29	expression  opType: OP_MOD	child:[ 30  31  ]
line:  7	nodeid: 30	variable  name: a	
line:  7	nodeid: 31	CONST  Type: int	
line:  7	nodeid: 32	CONST  Type: int	
line:  7	nodeid: 33	expression  opType: OP_EQ	child:[ 34  36  ]
line:  7	nodeid: 34	expression  opType: OP_NOT	child:[ 35  ]
line:  7	nodeid: 35	variable  name: a	
line:  7	nodeid: 36	CONST  Type: int	
line:  8	nodeid: 37	statement  stmtType: DECL	child:[ 38  39  ]
line:  8	nodeid: 38	type  type:int	
line:  8	nodeid: 39	variable  name: a	
line:  9	nodeid: 40	expression  opType: OP_ASSIGN	child:[ 41  42  ]
line:  9	nodeid: 41	variable  name: a	
line:  9	nodeid: 42	CONST  Type: int	
line:  10	nodeid: 43	statement  stmtType: IF	child:[ 44  49  51  53  56  59  ]
line:  10	nodeid: 44	expression  opType: OP_LESS	child:[ 45  47  ]
line:  10	nodeid: 45	expression  opType: OP_MINUS	child:[ 46  ]
line:  10	nodeid: 46	variable  name: s	
line:  10	nodeid: 47	expression  opType: OP_MINUS	child:[ 48  ]
line:  10	nodeid: 48	CONST  Type: int	
line:  11	nodeid: 49	statement  stmtType: PRINTF	child:[ 50  ]
line:  11	nodeid: 50	CONST  Type: string	
line:  12	nodeid: 51	statement  stmtType: PRINTF	child:[ 52  ]
line:  12	nodeid: 52	variable  name: s	
line:  13	nodeid: 53	statement  stmtType: DECL	child:[ 54  55  ]
line:  13	nodeid: 54	type  type:int	
line:  13	nodeid: 55	variable  name: b	
line:  14	nodeid: 56	expression  opType: OP_ASSIGN	child:[ 57  58  ]
line:  14	nodeid: 57	variable  name: b	
line:  14	nodeid: 58	CONST  Type: int	
line:  15	nodeid: 59	statement  stmtType: FOR	child:[ 60  64  65  70  72  ]
line:  15	nodeid: 60	statement  stmtType: DECL	child:[ 61  62  63  ]
line:  15	nodeid: 61	type  type:int	
line:  15	nodeid: 62	variable  name: i	
line:  15	nodeid: 63	CONST  Type: int	
line:  15	nodeid: 64	statement  stmtType: SKIP	
line:  15	nodeid: 65	expression  opType: OP_ASSIGN	child:[ 66  67  ]
line:  15	nodeid: 66	variable  name: i	
line:  15	nodeid: 67	expression  opType: OP_PLUSS	child:[ 68  69  ]
line:  15	nodeid: 68	variable  name: i	
line:  15	nodeid: 69	CONST  Type: int	
line:  16	nodeid: 70	statement  stmtType: PRINTF	child:[ 71  ]
line:  16	nodeid: 71	CONST  Type: string	
line:  17	nodeid: 72	statement  stmtType: PRINTF	child:[ 73  ]
line:  17	nodeid: 73	variable  name: i	
